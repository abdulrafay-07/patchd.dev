// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String @id @default(uuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?

  account Account?
  session Session?
  profile UserProfile?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email])
  @@map("user")
}

model Account {
  id                    String @id @default(uuid())
  userId                String @unique
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?

  user  User  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("account")
}

model Session {
  id            String @id @default(uuid())
  userId        String @unique
  token         String
  expiresAt     DateTime
  ipAddress     String?
  userAgent     String?

  user  User  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([token])
  @@map("session")
}

model Verification {
  id            String @id @default(uuid())
  identifier    String
  value         String
  expiresAt     DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("verification")
}

model UserProfile {
  id            String  @id @default(uuid())
  userId        String  @unique 
  handle        String  @unique
  tagline       String?
  location      String?
  revenue       String?
  tag           String?

  socialLinks   SocialLink[]
  projects      Project[]

  user          User          @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_profile")
}

model SocialLink {
  id        String  @id @default(uuid())
  userId    String
  url       String
  platform  SocialPlatform  @unique

  profile   UserProfile @relation(fields: [userId], references: [userId])

  createdAt DateTime  @default(now())

  @@map("social_link")
}

enum SocialPlatform {
  GITHUB
  TWITTER
  LINKEDIN
  EMAIL
  INSTAGRAM
  YOUTUBE
}

model Project {
  id          String  @id @default(uuid())
  userId      String
  name        String
  description String?
  image       String?
  url         String
  revenue     String?
  category    ProjectCategory?
  status      ProjectStatus?

  profile   UserProfile @relation(fields: [userId], references: [userId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("project")
}

enum ProjectCategory {
  DEV_TOOLS         // APIs, SDKs, CLIs, libs
  AI                // LLMs, chatbots, AI tools
  EDUCATION         // Courses, learning platforms, student tools
  ECOMMERCE         // Stores, carts, shop platforms
  FINANCE           // Budgeting, crypto, fintech
  PRODUCTIVITY      // Task managers, calendars, note apps
  SOCIAL            // Chat, networks, communities
  HEALTH            // Fitness, wellness, mental health
  ENTERTAINMENT     // Streaming, memes, content
  DESIGN            // UI kits, Figma plugins, visual tools
  PORTFOLIO         // Personal websites, dev portfolios
  MARKETPLACE       // Platforms connecting buyers/sellers
  SAAS              // Any business-focused SaaS tool
  MEDIA             // Video, audio, image tools
  GAME              // Any game or game engine
  COMMUNITY         // Forums, groups, social spaces
  ANALYTICS         // Dashboards, metrics, tracking
  BLOG              // CMSs, personal/blog platforms
  UTILITIES         // Helpers, extensions, automation tools
  OTHER             // Catch-all fallback
}

enum ProjectStatus {
  BUILDING
  LIVE
  PAUSED
  DISCONTINUED
  SELLING
  ACQUIRED
}
